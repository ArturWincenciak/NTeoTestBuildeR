// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NTeoTestBuildeR.Modules.Todos.Core.DAL;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NTeoTestBuildeR.Modules.Todos.Core.DAL.Migrations
{
    [DbContext(typeof(TeoAppDbContext))]
    [Migration("20240416000450_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("todos")
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NTeoTestBuildeR.Modules.Todos.Core.Model.Todo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Done")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Todos", "todos");
                });

            modelBuilder.Entity("NTeoTestBuildeR.Modules.Todos.Core.Model.Todo", b =>
                {
                    b.OwnsOne("NTeoTestBuildeR.Modules.Todos.Core.Model.TagCollection", "Tags", b1 =>
                        {
                            b1.Property<Guid>("TodoId")
                                .HasColumnType("uuid");

                            b1.Property<string[]>("Tags")
                                .IsRequired()
                                .HasColumnType("text[]");

                            b1.HasKey("TodoId");

                            b1.ToTable("Todos", "todos");

                            b1.ToJson("Tags");

                            b1.WithOwner()
                                .HasForeignKey("TodoId");
                        });

                    b.Navigation("Tags")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
